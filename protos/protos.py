# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: skynet.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List, Optional

import betterproto
import grpclib


class KAnonymeAlgorithm(betterproto.Enum):
    DATAFLY = 0
    INCOGNITO = 1
    TOPDOWN_GREEDY = 2
    CLASSIC_MONDRIAN = 3
    BASIC_MONDRIAN = 4


class CategoricalAnonimisation(betterproto.Enum):
    # Synthetic data
    CATEGORICAL_FAKE = 0
    # Automatic synthetic data
    CATEGORICAL_FAKE_AUTO = 1
    # Resampling with preserved distribution
    CATEGORICAL_RESAMPLING = 2
    # Toeknization
    CATEGORICAL_TOKENIZATION = 3
    # Email masking
    CATEGORICAL_EMAIL_MASKING = 4


class DateTimeAnonimisation(betterproto.Enum):
    # Synthetic date
    DATETIME_FAKE = 0
    # Perturbation
    DATETIME_NOISE = 1


class NumericAnonimisation(betterproto.Enum):
    # Perturbation
    NUMERIC_NOISE = 0
    # Binning
    NUMERIC_BINNING = 1
    # PCA Masking
    NUMERIC_MASKING = 2
    # Rounding
    NUMERIC_ROUNDING = 3


class ColType(betterproto.Enum):
    # Automatically infer data-type
    ColType_Infer = 0
    # Text or mixed numeric and non-numeric values
    ColType_Object = 1
    # Integer numbers
    ColType_Int64 = 2
    # Floating point numbers
    ColType_Float64 = 3
    # True/False values
    ColType_Bool = 4
    # / Date and time values
    ColType_DateTime64 = 5
    # Differences between two datetimes
    ColType_TimeDeltaMs = 6
    # Finite list of text values
    ColType_Category = 7


@dataclass
class SydoniaAnonimiserRequest(betterproto.Message):
    minio_info: "MinioInfo" = betterproto.message_field(1)
    sad_general_segment_and_sad_item_strategy: "GeneralSegmentAndSadItemStrategy" = (
        betterproto.message_field(2, group="sydoniaAnonimisationStrategy")
    )


@dataclass
class GeneralSegmentAndSadItemStrategy(betterproto.Message):
    general_segment_config: "SydoniaFileConfig" = betterproto.message_field(1)
    sad_item_config: "SydoniaFileConfig" = betterproto.message_field(2)
    serialization_config: "SerializationConfig" = betterproto.message_field(3)


@dataclass
class SydoniaFileConfig(betterproto.Message):
    file_path: str = betterproto.string_field(1)
    used_cols: Dict[str, "ColConfig"] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    deserialization_config: "DeserializationConfig" = betterproto.message_field(4)


@dataclass
class SydoniaAnonimiserResponse(betterproto.Message):
    anonimised_file_path: Dict[str, str] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass
class AnonimiseRequest(betterproto.Message):
    minio_info: "MinioInfo" = betterproto.message_field(1)
    file_path: str = betterproto.string_field(2)
    used_cols: Dict[str, "ColConfig"] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    serialization_config: "SerializationConfig" = betterproto.message_field(4)
    k_anonyme: "KAnonymeStrategy" = betterproto.message_field(
        5, group="anonimisationStrategy"
    )
    naive_strategy: "NaiveStrategy" = betterproto.message_field(
        6, group="anonimisationStrategy"
    )
    synthetise: "SynthetiseStrategy" = betterproto.message_field(
        8, group="anonimisationStrategy"
    )
    deserialization_config: "DeserializationConfig" = betterproto.message_field(9)


@dataclass
class AnonimiseResponse(betterproto.Message):
    anonimised_file_path: str = betterproto.string_field(1)
    mapper_file_path: str = betterproto.string_field(4)


@dataclass
class SerializationConfig(betterproto.Message):
    file_path: str = betterproto.string_field(2)
    no_header: bool = betterproto.bool_field(3)
    separator: str = betterproto.string_field(5)


@dataclass
class DeserializationConfig(betterproto.Message):
    used_cols: Dict[str, "ColConfig"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    na_values: List[str] = betterproto.string_field(2)
    separator: str = betterproto.string_field(3)


@dataclass
class KAnonymeStrategy(betterproto.Message):
    algorithm: "KAnonymeAlgorithm" = betterproto.enum_field(1)


@dataclass
class ColConfig(betterproto.Message):
    col_types: "ColType" = betterproto.enum_field(1)
    to_psuedonimise: bool = betterproto.bool_field(2)


@dataclass
class SynthetiseStrategy(betterproto.Message):
    epsilon: float = betterproto.float_field(1)


@dataclass
class NaiveStrategy(betterproto.Message):
    lang: str = betterproto.string_field(1)
    categorical_cols: Dict[str, "CategoricalAnonimisation"] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_ENUM
    )
    numerical_cols: Dict[str, "NumericAnonimisation"] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_ENUM
    )
    datetime_cols: Dict[str, "DateTimeAnonimisation"] = betterproto.map_field(
        4, betterproto.TYPE_STRING, betterproto.TYPE_ENUM
    )


@dataclass
class MinioInfo(betterproto.Message):
    key: str = betterproto.string_field(1)
    secret: str = betterproto.string_field(2)
    token: str = betterproto.string_field(3)


class SkynetBlockerStub(betterproto.ServiceStub):
    """
    SkynetBlocker expose available APIs for Anonimise and treat cv services
    """

    async def anonimise(
        self,
        *,
        minio_info: Optional["MinioInfo"] = None,
        file_path: str = "",
        used_cols: Optional[Dict[str, "ColConfig"]] = None,
        serialization_config: Optional["SerializationConfig"] = None,
        k_anonyme: Optional["KAnonymeStrategy"] = None,
        naive_strategy: Optional["NaiveStrategy"] = None,
        synthetise: Optional["SynthetiseStrategy"] = None,
        deserialization_config: Optional["DeserializationConfig"] = None,
    ) -> AnonimiseResponse:
        """Anonimise service of a given csv"""

        request = AnonimiseRequest()
        if minio_info is not None:
            request.minio_info = minio_info
        request.file_path = file_path
        request.used_cols = used_cols
        if serialization_config is not None:
            request.serialization_config = serialization_config
        if k_anonyme is not None:
            request.k_anonyme = k_anonyme
        if naive_strategy is not None:
            request.naive_strategy = naive_strategy
        if synthetise is not None:
            request.synthetise = synthetise
        if deserialization_config is not None:
            request.deserialization_config = deserialization_config

        return await self._unary_unary(
            "/protos.SkynetBlocker/Anonimise",
            request,
            AnonimiseResponse,
        )

    async def sydonia_anonimiser(
        self,
        *,
        minio_info: Optional["MinioInfo"] = None,
        sad_general_segment_and_sad_item_strategy: Optional[
            "GeneralSegmentAndSadItemStrategy"
        ] = None,
    ) -> SydoniaAnonimiserResponse:
        request = SydoniaAnonimiserRequest()
        if minio_info is not None:
            request.minio_info = minio_info
        if sad_general_segment_and_sad_item_strategy is not None:
            request.sad_general_segment_and_sad_item_strategy = (
                sad_general_segment_and_sad_item_strategy
            )

        return await self._unary_unary(
            "/protos.SkynetBlocker/SydoniaAnonimiser",
            request,
            SydoniaAnonimiserResponse,
        )
