// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: protos/skynet.proto

package Skynet_Blocker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SkynetBlockerClient is the client API for SkynetBlocker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SkynetBlockerClient interface {
	Anonimise(ctx context.Context, in *AnonimiseRequest, opts ...grpc.CallOption) (*AnonimiseResponse, error)
	SydoniaAnonimiser(ctx context.Context, in *SydoniaAnonimiserRequest, opts ...grpc.CallOption) (*SydoniaAnonimiserResponse, error)
	Visualizer(ctx context.Context, in *VisualizerRequest, opts ...grpc.CallOption) (*VisualizerResponse, error)
}

type skynetBlockerClient struct {
	cc grpc.ClientConnInterface
}

func NewSkynetBlockerClient(cc grpc.ClientConnInterface) SkynetBlockerClient {
	return &skynetBlockerClient{cc}
}

func (c *skynetBlockerClient) Anonimise(ctx context.Context, in *AnonimiseRequest, opts ...grpc.CallOption) (*AnonimiseResponse, error) {
	out := new(AnonimiseResponse)
	err := c.cc.Invoke(ctx, "/protos.SkynetBlocker/Anonimise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skynetBlockerClient) SydoniaAnonimiser(ctx context.Context, in *SydoniaAnonimiserRequest, opts ...grpc.CallOption) (*SydoniaAnonimiserResponse, error) {
	out := new(SydoniaAnonimiserResponse)
	err := c.cc.Invoke(ctx, "/protos.SkynetBlocker/SydoniaAnonimiser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skynetBlockerClient) Visualizer(ctx context.Context, in *VisualizerRequest, opts ...grpc.CallOption) (*VisualizerResponse, error) {
	out := new(VisualizerResponse)
	err := c.cc.Invoke(ctx, "/protos.SkynetBlocker/Visualizer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SkynetBlockerServer is the server API for SkynetBlocker service.
// All implementations must embed UnimplementedSkynetBlockerServer
// for forward compatibility
type SkynetBlockerServer interface {
	Anonimise(context.Context, *AnonimiseRequest) (*AnonimiseResponse, error)
	SydoniaAnonimiser(context.Context, *SydoniaAnonimiserRequest) (*SydoniaAnonimiserResponse, error)
	Visualizer(context.Context, *VisualizerRequest) (*VisualizerResponse, error)
	mustEmbedUnimplementedSkynetBlockerServer()
}

// UnimplementedSkynetBlockerServer must be embedded to have forward compatible implementations.
type UnimplementedSkynetBlockerServer struct {
}

func (UnimplementedSkynetBlockerServer) Anonimise(context.Context, *AnonimiseRequest) (*AnonimiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Anonimise not implemented")
}
func (UnimplementedSkynetBlockerServer) SydoniaAnonimiser(context.Context, *SydoniaAnonimiserRequest) (*SydoniaAnonimiserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SydoniaAnonimiser not implemented")
}
func (UnimplementedSkynetBlockerServer) Visualizer(context.Context, *VisualizerRequest) (*VisualizerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Visualizer not implemented")
}
func (UnimplementedSkynetBlockerServer) mustEmbedUnimplementedSkynetBlockerServer() {}

// UnsafeSkynetBlockerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SkynetBlockerServer will
// result in compilation errors.
type UnsafeSkynetBlockerServer interface {
	mustEmbedUnimplementedSkynetBlockerServer()
}

func RegisterSkynetBlockerServer(s grpc.ServiceRegistrar, srv SkynetBlockerServer) {
	s.RegisterService(&SkynetBlocker_ServiceDesc, srv)
}

func _SkynetBlocker_Anonimise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnonimiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkynetBlockerServer).Anonimise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.SkynetBlocker/Anonimise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkynetBlockerServer).Anonimise(ctx, req.(*AnonimiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkynetBlocker_SydoniaAnonimiser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SydoniaAnonimiserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkynetBlockerServer).SydoniaAnonimiser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.SkynetBlocker/SydoniaAnonimiser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkynetBlockerServer).SydoniaAnonimiser(ctx, req.(*SydoniaAnonimiserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkynetBlocker_Visualizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisualizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkynetBlockerServer).Visualizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.SkynetBlocker/Visualizer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkynetBlockerServer).Visualizer(ctx, req.(*VisualizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SkynetBlocker_ServiceDesc is the grpc.ServiceDesc for SkynetBlocker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SkynetBlocker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.SkynetBlocker",
	HandlerType: (*SkynetBlockerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Anonimise",
			Handler:    _SkynetBlocker_Anonimise_Handler,
		},
		{
			MethodName: "SydoniaAnonimiser",
			Handler:    _SkynetBlocker_SydoniaAnonimiser_Handler,
		},
		{
			MethodName: "Visualizer",
			Handler:    _SkynetBlocker_Visualizer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/skynet.proto",
}
