# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from protos import skynet_pb2 as protos_dot_skynet__pb2


class SkynetBlockerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Anonimise = channel.unary_unary(
                '/protos.SkynetBlocker/Anonimise',
                request_serializer=protos_dot_skynet__pb2.AnonimiseRequest.SerializeToString,
                response_deserializer=protos_dot_skynet__pb2.AnonimiseResponse.FromString,
                )
        self.SydoniaAnonimiser = channel.unary_unary(
                '/protos.SkynetBlocker/SydoniaAnonimiser',
                request_serializer=protos_dot_skynet__pb2.SydoniaAnonimiserRequest.SerializeToString,
                response_deserializer=protos_dot_skynet__pb2.SydoniaAnonimiserResponse.FromString,
                )
        self.Visualizer = channel.unary_unary(
                '/protos.SkynetBlocker/Visualizer',
                request_serializer=protos_dot_skynet__pb2.VisualizerRequest.SerializeToString,
                response_deserializer=protos_dot_skynet__pb2.VisualizerResponse.FromString,
                )


class SkynetBlockerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Anonimise(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SydoniaAnonimiser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Visualizer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SkynetBlockerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Anonimise': grpc.unary_unary_rpc_method_handler(
                    servicer.Anonimise,
                    request_deserializer=protos_dot_skynet__pb2.AnonimiseRequest.FromString,
                    response_serializer=protos_dot_skynet__pb2.AnonimiseResponse.SerializeToString,
            ),
            'SydoniaAnonimiser': grpc.unary_unary_rpc_method_handler(
                    servicer.SydoniaAnonimiser,
                    request_deserializer=protos_dot_skynet__pb2.SydoniaAnonimiserRequest.FromString,
                    response_serializer=protos_dot_skynet__pb2.SydoniaAnonimiserResponse.SerializeToString,
            ),
            'Visualizer': grpc.unary_unary_rpc_method_handler(
                    servicer.Visualizer,
                    request_deserializer=protos_dot_skynet__pb2.VisualizerRequest.FromString,
                    response_serializer=protos_dot_skynet__pb2.VisualizerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protos.SkynetBlocker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SkynetBlocker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Anonimise(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protos.SkynetBlocker/Anonimise',
            protos_dot_skynet__pb2.AnonimiseRequest.SerializeToString,
            protos_dot_skynet__pb2.AnonimiseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SydoniaAnonimiser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protos.SkynetBlocker/SydoniaAnonimiser',
            protos_dot_skynet__pb2.SydoniaAnonimiserRequest.SerializeToString,
            protos_dot_skynet__pb2.SydoniaAnonimiserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Visualizer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protos.SkynetBlocker/Visualizer',
            protos_dot_skynet__pb2.VisualizerRequest.SerializeToString,
            protos_dot_skynet__pb2.VisualizerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
